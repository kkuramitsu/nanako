ななこ: 生成AI時代の教育用プログラミング言語

ななこ

生成AI時代の新しいプログラミング言語です。
プログラミングの重要な概念と技法を学びやすいように設計されています。

どの辺りが新しいかといえば、
生成AIがコードを生成できない点に付きます。
もちろん、将来、生成AIがコードを学習して生成できるようになるかもしれませんが、
その過程を観察するのも一つの目的です。

生成AIがコードが生成できるようになったら

ななこの開発の動機は、Prompts First で始めた釈然としない。

もう一つは、アルゴリズムの教育がしにくい。

アルゴリズムというのは、コンピュータに与える問題解決の手順なのですが、
生成AIの推論力が素晴らしすぎて、手順を与えなくても、目的を与えるだけで
結構、アルゴリズムとコードを正しく推論できてしまいます。
大学レベルのアルゴリズムなら、間違えることはありません。

もっとよろしくないことは、変に頑張ってあまり伸びない点なんですよ。
大学院生が分析してくれていて、僕が勝手に発表するわけにいかないけど、
変に手順を与えると、間違える。
何も与えずに目的や要件だけ書くのが生成AIが使える。

アルゴリズムは教えなくていいのかというと、
コンピュータ技術の根幹なのでやっぱり教えたい。
AI時代に適した形です。

そのあたりの要望を

# コードを書くということはどういうことか？

コードを書くということは、
新しいプログラミング言語を書くということなんですよね。

たとえば、あったとします。

全品20%オフ
「20000円以上、購入した方はさらに10%オフ」

ななこは日本語として読めますが、日本語ではありません。
厳密な文法や解釈が決まっていて、
勝手に書いたものを理解してくれるわけではありません。

変数

データの格納場所の名前です。

体重 = 55

体重を増やす

「体重を増やす」といったら色々な増え方がありますが、
ななこの場合は意味が決まっています。
体重を1つだけ増やします。

体重を減らす

カロリー摂取量 = 1500

もしカロリー摂取量が1500以上ならば {
  体重を増やす
}
そうでなければ {
  体重を減らす
}

ななこは何ができるか？



目的：
チューリング完全な言語で万能性を学ぶ。
限られた機能： 
　インクリメント、デクリメント、
　絶対値 |x|　マイナス -X.  (中置記法なし)
　条件文は, 0との比較のみ
  N回繰り返すのみ
  関数定義あり  

文法、実行、
くり返し、ルール、関数
チューリング完全、万能性
文字列、二次元配列
アルゴリズム、計算量


Program = (_ Statement)* .!

Block = "{" (_ Satement)* "}"

Satement = 
  / Assignment
  / Increment
  / Decrement
  / IfStatement
  / LoopStatement
  / Return 

Assignment =
    Variable ("="/"を") _ Expression ( _ "とする")? EOL

Increment =
    Variable ("++" / "を増やす") EOL

Decrement = 
    Variable ("--" / "を減らす") EOL

IfStatement =
    "もし" CMA Expression "が" CMA "0" ("以上"/"以下"/"より大きい"/"より小さい"/"以外"/"未満"/"") _ "ならば" CMA 
    Block EOL (_ "そうでなければ" CMA Block EOL)?

LoopStatement =
    Expression "回" CMA "くり返す" Block EOL

ReturnStatement = 
    Expression "が答え" EOL

Expression = 
    / Integer 
    / Function
    / FuncCall
    / ArrayList
    / NullValue
    / Variable
    / Expression

Integer = 
  "-"? [0-9]+ _

Function =
    ("λ" / "入力") _ Identifier (_ "," _ Identifier)* _ "に対し" CMA Block

FuncCall = 
    Identifer _ "(" _ Expression (_ "," _ Expression)* _ ")" _

ArrayList = 
    "[" (Expression _ ","? _ )* "]" _

NullValue =
    ("null" / "？"/ "?" ) _

Variable = 
    Identifier (_ "[" Expression "]")* _

Identifer =
    [A-Za-z_一-龠あ-んア-ンー] 
    (!"くり返す" !"を" !"とする" !"が" [A-Za-z_一-龠あ-んア-ンー])* ([0-9])*　_

CMA = "、"? _
_ = (" " / "　" / "\t")*
EOL = _ ("\n" / !.)



たし算 = 入力 X, Y に対し {
  Y回、くり返す{
    X を増やす
  }
  Xが答え
}

たし算 = 入力 X, Y に対し {
  もし Yが0以下ならば、{
    Y回、くり返す{
        X を減らす
    }
  }
  そうでなければ {
    Y回、くり返す{
        X を増やす
    }
  }
  Xが答え
}



ひき算 = 入力 X, Y に対し {
  Y回、くり返す{
    X を減らす
  }
  Xが答え
}

絶対値 = 入力 X に対し {
    もし Xが0より小さいならば {
        引き算(0, X)が答え
    }
    そうでなければ {
        Xが答え
    }
}

大きい方 = 入力 X, Yに対し {
    もし引き算(X, Y)が0以上ならば {
        X が答え
    }
    そうでなければ {
        Yが答え
    }
}

かけ算 = 入力 X, Yに対し {
  Z = 0
  Y回、くり返す {
　 Z = たし算（Z, X）    
  }
  Zが答え   
}

最大公約数 = 入力 X, Y に対し{
  ？回、くり返す {
　 R = 余り（X, Y)
    もし R が 0 ならば {
       Yが答え
     }
     X = Y
     Y = R
  }
}

BMI = 入力 体重、身長に対し{
　割り算（かけ算（体重、体重）、身長）が答え
}

FizzBuzz = 入力 N に対し {
  N回、くり返す {
    もしあまり(X,Y)がゼロかつ
  }
}
